<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Linsen</title>
    <link>https://linsentaixian.github.io/LinsenTaixian/posts/</link>
    <description>Recent content in Posts on Linsen</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 12 Dec 2020 10:47:53 +0800</lastBuildDate><atom:link href="https://linsentaixian.github.io/LinsenTaixian/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Project_7</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/project_7/</link>
      <pubDate>Sat, 12 Dec 2020 10:47:53 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/project_7/</guid>
      <description>脑机连接带来的伦理道德问题 在电影黑客帝国中人们通过脑后的接口与计算机相连，活在电脑虚拟出来的世界中，过着《楚门世界》的生活。 如今这一技术虽然缓慢但是仍然在一步一步的向我们走来，美国福克斯新闻网就曾在报道中指出，一项新研究表明，脑机接口面世的时间可能大大早于很多人的预期，或许几十年内就能实现。
我们必须对此保持着谨慎的态度,因为脑机接口技术会带来很多的伦理道德问题
  第一个隐私问题
使用脑机接口将人脑与机器相连接意味着人的思想将变得毫无隐私可言，因为你的每一个思想都是大脑中的电信号的传递而产生的，而这些电信号也将通过脑机接口传输到机器，你的大脑将变得毫无密码可言，一切都将在机器中一览无遗。
  脑机责任
脑机连接技术将大脑信号直接转化成机器行动，正常大脑会克制和犹豫，而芯片却不会。 脑机芯片并不会关心一个机器动作的后果，不会犹豫和克制的芯片将会指令机器做出许多正常人只是一闪而过的念头，造成冲突和犯罪。 将来到了法庭上，法官该如何判决呢？是发出指令的人，还是芯片制造商和机器承担罪责？
  现实中的“少数派报告”
人的脑信号变得可视化之后，那么政府机构将会通过扫描社会中人们的大脑信息来查找罪犯或者寻找潜在的罪犯，将他们囚禁起来，这个技术对预防犯罪有着极大的帮助，但是在没有犯罪的前提下将人逮捕是不合法的，但是不这样做又会造成社会危害，这就是现实世界中的“少数派报告”
  是人还是机器
脑机接口进一步发展，人类的身体将可以丢弃，可以借由机器来生存，但是这样一来我们是人还是机器，血肉之躯我们人类使用了几千万年， 如今丢弃了，那么我们还是人类吗？还是只是一个智能的机器
  自然属性的消亡
人类可以依靠机器获得永生, 也可以通过机器来孕育后代. 那么人类最后的婚姻和家庭的自然属性将消失, 这是福还是祸?
  自由意志是否存在
人类的大脑连接机器之后，那么也需要机器来提高大脑信息，那么这个时候是人在控制着机器，还是机器在控制着大脑。如果是后者，那还有自由意志吗？所谓的人脑意识不过是一段电信号而已。
  如果继续深入思考的话，脑机连接技术最终还会碰上一个哲学难题，那就是“忒修斯之船”。 公元1世纪的时候普鲁塔克提出一个问题：如果忒修斯船上的木头被逐渐替换，直到所有的木头都不是原来的木头，那么是这艘船是原来的那艘船呢，还是换下来的木头组成的船是原来的那艘船？ 同理，如果有一天，我们的身体部分逐浙被机器部件所替代，那用我的身体部分组成的这个人是我，还是现在的机器组成的这个人是我？</description>
    </item>
    
    <item>
      <title>Project_6</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/project_6/</link>
      <pubDate>Mon, 30 Nov 2020 10:44:21 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/project_6/</guid>
      <description>使用python求解  选择2个高等数学上的作业，如泰勒分解、公式化简、解方程等。 选择2个线性代数上的作业，如求dot、逆矩阵等，最好会解方程。  解: 高数   题目1:高数二 p52 4.2题 解答:   题目:高数二下 p156 1.1题 解答:   线代   题目1 线代 p55 16题 解答: 线代 p127 32题   题目2 解答:   </description>
    </item>
    
    <item>
      <title>Project_5</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/project_5/</link>
      <pubDate>Sun, 15 Nov 2020 14:55:19 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/project_5/</guid>
      <description>题目： 用伪代码描述算法。介绍“自顶向下，逐步求精”的编程方法，以你观察的洗衣机为案例，用伪代码描述洗衣机洗衣的程序。
答： 自上而下方法本质上是对系统进行分解，以便以逆向工程的方式深入了解其组成子系统。 采用自上而下的方法时，会对系统的概观进行规划和具体说明，但对于第一层子系统的细节则不予阐述。接着，对每个子系统进行更详细的细化，有时甚至在许多附加的子系统层级中进行细化，直到整个规范都简化为基本元素。 自上而下模型通常会借助于“黑盒子”来详细规定，使其更易于操作。 但是，黑盒子可能会无法阐明基本机制，或可能不够详细而无法实际验证模型。 自上而下的方法始于全局，由此分解至更小的部分。
伪代码： 洗衣过程： set the water in &amp;raquo; soap the clothes &amp;raquo; wash the clothes &amp;raquo; dewatering the clothes &amp;raquo; stop the work
伪代码：
注水： turn on the water_in_switch set the water volume while(water_input is less than the water volume) keep the water_in_switch open while(water_input is more than the water volume or volume timeout) stop input water
浸泡： set the soaping time for(set the left time is zero ;the left time is less than the setting time; increase the left time) keep the clothes soaping if(the left time is equal to the setting time) begin to wash</description>
    </item>
    
    <item>
      <title>Homework_9</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/homework_9/</link>
      <pubDate>Sun, 15 Nov 2020 14:34:37 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/homework_9/</guid>
      <description>Bubble Sort the list: 33, 56, 17, 8, 95, 22。Make sure the final result is from small to large. Write out the list after the 2nd pass. (10 points) Give a sorted array as list={60,65,75,80,90,95}. Design an algorithm to insert the value of x into the sorted array. Then test the algorithm with value 50,67,99. 思考：为什么选择插入点在list头上、中间、尾巴上的三个数作为算 法测试的数据，你能解释吗？ What is the state of the stack after the following sequence of Push and Pop operations?</description>
    </item>
    
    <item>
      <title>project_1</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/project_1/</link>
      <pubDate>Fri, 30 Oct 2020 20:25:00 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/project_1/</guid>
      <description>快速幂运算和矩阵快速幂运算 快速幂运算 题:既求一个数的n次方,其中n特别大, 最后的结果对k取余
例如$ a^{22}$ 其中$ 22$的二进制表示为$ 10110$, 所以可以通过一直计算$ x$的平方, 然后在n的二进制为一的地方乘以res, 就可以得到下面的额算法
typedef long long ll; ll mod_pow(ll x, ll n, ll mod_k){ ll res = 1; while(n &amp;gt; 0){ if(n&amp;amp;1) res = x*x%mod_k; x = x*x%mod_k; n&amp;gt;&amp;gt;= 1; } return res; } 或者:
或者也可以采用另外一种理解使用递归函数$n$ 为偶数时, 其递归是$a^n = (a^2)^{\frac{n}{2}}$ , 如果是奇数, 也可以递归成 $ a^n = {(a^2)}^{\frac{n- 1}{2}}\times a$ , 就是下面的代码所示
typedef long long ll; ll mod_pow(ll x, ll n, ll mod_k){ if(n == 0) return 1; ll res = mod_pow(x*x%mod_k, n/2, mod_k); if(n&amp;amp;1) res = res*x%mod_k; return res; } 矩阵的快速幂运算 两个矩阵的快速运算为</description>
    </item>
    
    <item>
      <title>project_2</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/project_2/</link>
      <pubDate>Fri, 30 Oct 2020 20:25:00 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/project_2/</guid>
      <description>以Construct 3制作平台游戏的新手指南   首先你需要打开这个网站，然后注册登录。之后便可以进行游戏的制作啦
  游戏制作第一步,先创建新项目.  游戏制作的第二步,你需要给你的游戏选一张背景图.   选择好背景之后就可以选择游戏的人物了   人物已经创建好了,接下来就是加一些事件了   好了,游戏已经创建好了,现在保存预览就可以了,记得保存到本地或者云中.
  这是我的游戏链接</description>
    </item>
    
    <item>
      <title>Project_3</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/project_3/</link>
      <pubDate>Thu, 29 Oct 2020 20:25:00 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/project_3/</guid>
      <description>任务 1：建立一个简单电路   设计与门验证电路
  画真值表验证与门功能
   InA INB Out     0 0 0   0 1 ？   1 0 ？   1 1 ？      选做题：
 如何用 XOR 门作非门。 串联、并联三极管，结果是什么门？    解:   如表    InA INB Out     0 0 0   0 1 0   1 0 0   1 1 1     如下  将 XOR 门的一个引脚接高电平,另一个作为输入, 这时就是一个非门 串联是与门，并联是或门    任务 2：验证电路等价   分别建立电路 A（B+C）和 AB+AC 在一个界面上。用 A，B，C 用三个开关控制输入，用两个 LED 表示输出。</description>
    </item>
    
    <item>
      <title>Project_4</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/project_4/</link>
      <pubDate>Thu, 29 Oct 2020 18:43:16 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/project_4/</guid>
      <description>任务 1：简单程序   打开网页 [The PIPPIN User’s Guide](slides/The PIPPIN User’s Guide.html) ，然后输入 Program 1：Add 2 number
  点step after step。观察并回答下面问题：
 PC，IR 寄存器的作用。 ACC 寄存器的全称与作用。 用“LOD #3”指令的执行过程，解释Fetch-Execute周期。 用“ADD W” 指令的执行过程，解释Fetch-Execute周期。 “LOD #3” 与 “ADD W” 指令的执行在Fetch-Execute周期级别，有什么不同。    点击“Binary”,观察回答下面问题
 写出指令 “LOD #7” 的二进制形式，按指令结构，解释每部分的含义。 解释 RAM 的地址。 该机器CPU是几位的？（按累加器的位数） 写出该程序对应的 C语言表达。    解：  略 如下   PC寄存器是保存指令的地址，IR寄存器是保存根据PC地址取到的指令
  全称:Accumulator(累加器)
作用:用于数据的算术运算和逻辑运算，可以存放数据或中间结果。
   PC 根据地址从RAM取出指令LOD #3 指令传入IR，指令传入Decoder，无需取址，之后数字3传入MUX 数字3传入ALU之后传入ACC     PC根据地址从RAM取出指令ADD W 指令传入IR之后传入Decoder ALU从ACC中取值 IR再次访问RAM中的W，从W中取值 W的值读入ALU ALU执行加法，结果传入ACC    LOD #3只需访问RAM一次,而ADD W需要两次访问RAM</description>
    </item>
    
    <item>
      <title>Homework_8</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/homework_8/</link>
      <pubDate>Mon, 19 Oct 2020 21:24:49 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/homework_8/</guid>
      <description>阅读 Pseudocode Standard。（答案可以打印）
 用伪代码描述将十进制转换成16进制的方法 C语言实现（先用注释写好算法，然后翻译） 使用 -1, 0, 1, 15, 26，3265 最为输入测试你的程序    名词解释与对比
 Top-down design Work breakdown structure (WBS) 简述管理学 WBS 与 信息学Top-down设计 的异同    仔细观察您洗衣机的运作过程，运用Top-down设计方法和Pseudocode 描述洗衣机控制程序。假设洗衣机可执行的基本操作如下
 water_in_switch(open_close) // open 打开上水开关，close关闭 water_out_switch(open_close) // open 打开排水开关，close关闭 get_water_volume() //返回洗衣机内部水的高度 motor_run(direction) // 电机转动。left左转，right右转，stop停 time_counter() // 返回当前时间计数，以秒为单位 halt(returncode) //停机，success 成功 failure 失败   请使用伪代码分解“正常洗衣”程序的大步骤。包括注水、浸泡等 1.进一步用基本操作、控制语句（IF、FOR、WHILE等）、变量与表达式，写出每个步骤的伪代码 根据你的实践，请分析“正常洗衣”与“快速洗衣”在用户目标和程序上的异同. 你认为是否存在改进（创新）空间，简单说明你的改进意见？ 通过步骤3），提取一些共性功能模块（函数），简化“正常洗衣”程序，使程序变得更利于人类理解和修改维护。例如：  wait(time) //等待指定的时间; 注水(volume,timeout) //在指定时间内完成注水，否则停机； 排水(timeout)。等子程序      解:</description>
    </item>
    
    <item>
      <title>Homework_7</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/homework_7/</link>
      <pubDate>Mon, 19 Oct 2020 21:24:45 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/homework_7/</guid>
      <description>Homework  Program with machine language according to the following c. int_8 a = 1; int_8 c = a + 3;  Write your assembly code &amp;amp; machine code Explain machine code execution with the fetch-decode-execute cycle Explain functions about IR, PC, ACC registers in a CPU Explain physical meaning about vars a &amp;amp; c in a machine   简答题  What are stored in memory? Can a data or a instruction stored in the same place?</description>
    </item>
    
    <item>
      <title>Homework_6</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/homework_6/</link>
      <pubDate>Mon, 19 Oct 2020 21:24:42 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/homework_6/</guid>
      <description>Homework:  According to the von Neumann architecture, List basic parts of a computer. A computer has 64 MB (megabytes) of memory. How many bits are needed to address any single byte in memory? List basic parts of a CPU, include cache or not? What mean secondary storage. List some on your PC. 使用维基百科，解释以下概念：CPU、RAM、ROM、Bus (computing)、Parallel Computing 写一段文字，简单解释“云计算（cloud computing）” 小孙买了计算机主板，说明书表明“支持双通道DDR3-1333内存, 最大支持16G”  DDR3内存，“3”和“1333”的含义是什么？ 小孙买8G DDR3-1600的内存能提高性能吗？ 小孙买4G*2 DDR3-1333的内存能提高性能吗？ 16G需要多少位地址？    解:</description>
    </item>
    
    <item>
      <title>Homework_5</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/homework_5/</link>
      <pubDate>Mon, 19 Oct 2020 21:24:38 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/homework_5/</guid>
      <description>part1  Give the three representations of an AND gate and say in your words what AND means. Give the three representations of an XOR gate and say in your words what XOR means. Draw a circuit diagram corresponding to the following Boolean expression: (A + B)(B + C) Show the behavior of the following circuit with a truth table: What is circuit equivalence? Use truth table to prove the following formula.</description>
    </item>
    
    <item>
      <title>Homework_4</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/homework_4/</link>
      <pubDate>Mon, 19 Oct 2020 21:24:34 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/homework_4/</guid>
      <description>名词解释 ASCII ASCII (/ˈæskiː/ (About this soundlisten) ASS-kee),[3]:6 abbreviated from American Standard Code for Information Interchange, is a character encoding standard for electronic communication.
Color Color (American English), or colour (Commonwealth English), is the characteristic of visual perception described through color categories, with names such as red, orange, yellow, green, blue, or purple. This perception of color derives from the stimulation of photoreceptor cells (in particular cone cells in the human eye and other vertebrate eyes) by electromagnetic radiation (in the visible spectrum in the case of humans).</description>
    </item>
    
    <item>
      <title>Homework_3</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/homework_3/</link>
      <pubDate>Mon, 19 Oct 2020 21:24:31 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/homework_3/</guid>
      <description>part1 Write out variables x, y and z in binary code
  int8_t x = 67; int8_t y = -7; int8_t z = y - x
  int8_t x = 0xd3;
  uint8_t = 0xd3;
  int8_t x = 127; int8_t y = -7; int8_t z = y – x;
  float x = 1.125;
  float x = 23.0;
  float x = 0.</description>
    </item>
    
    <item>
      <title>Homework_2</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/homework_2/</link>
      <pubDate>Mon, 19 Oct 2020 21:24:28 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/homework_2/</guid>
      <description>进制转换  1分12秒 = （72000）毫秒 （7A）13 = （101）10 （7A）16 = （122）10 （7A）16 = （111 1010）2 = （172）8 （1011011）2 = （133）8 = （5B）16 （678）10 = （10 1010 0110）2 = （1246）8 （111）2 + （101）2 = （1100）2  名词解释 Information Information can be thought of as the resolution of uncertainty.
Positional notation Positional notation denotes usually the extension to any base of the Hindu–Arabic numeral system (or decimal system).
Algorithm In mathematics and computer science, an algorithm is a finite sequence of well-defined, computer-implementable instructions, typically to solve a class of problems or to perform a computation.</description>
    </item>
    
    <item>
      <title>Homework_1</title>
      <link>https://linsentaixian.github.io/LinsenTaixian/posts/homework_1/</link>
      <pubDate>Mon, 19 Oct 2020 21:23:46 +0800</pubDate>
      
      <guid>https://linsentaixian.github.io/LinsenTaixian/posts/homework_1/</guid>
      <description>名词解释 Computer A computer is a machine that can be instructed to carry out sequences of arithmetic or logical operations automatically via computer programming.
Computer science Computer science is the study of algoric ithmprocesses and computational machines.
Software Computer software, or simply software, is a collection of data or computer instructions that tell the computer how to work.
Software engineer A software engineer is a person who applies the principles of software engineering to the design, development, maintenance, testing, and evaluation of computer software.</description>
    </item>
    
  </channel>
</rss>
